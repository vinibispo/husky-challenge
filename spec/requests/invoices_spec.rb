require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/invoices", type: :request do

  # This should return the minimal set of attributes required to create a valid
  # Invoice. As you add validations to Invoice, be sure to
  # adjust the attributes here as well.
  describe "Not authenticated" do
    describe "with expired token" do
      
      let(:valid_attributes) {
      { emails: 'email@example.com' }
      }
      before do
        user = create(:user)
        user_token = create(:user_token, user:, confirmed_at: DateTime.now)
        @user = user
        post sessions_url, params: { session: { token: user_token.token } }
        user_token.update(revoked_at: DateTime.now)
      end

      describe "GET /index" do
        it "does not render successful response" do
          @user.invoices.create! valid_attributes
          get invoices_url
          expect(response).to_not be_successful
        end
      end

      describe "POST /create" do

        it "should not succeed response" do
          post invoices_url, params: { invoice: valid_attributes }
          expect(response).to_not be_successful
        end
      end
    end

    describe "with no token" do
      let(:valid_attributes)  { 
        { emails: 'email@example.com' }
      }
      before do
        user = create(:user)
        user_token = create(:user_token, user:, confirmed_at: DateTime.now)
        @user = user
      end

      describe "POST /create" do
        it 'should not succeed response' do
          post invoices_url, params: { invoice: valid_attributes }
          expect(response).to_not be_successful
        end
      end
    end
  end
  describe "Authenticated" do
    
    let(:valid_attributes) {
    { emails: 'email@example.com' }
    }

    let(:invalid_attributes) {
    {emails: ''}
    }

    before do
      user = create(:user)
      user_token = create(:user_token, user:, confirmed_at: DateTime.now)
      @user = user
      post sessions_url, params: { session: { token: user_token.token } }
    end

    describe "GET /index" do
      it "renders a successful response" do
        @user.invoices.create! valid_attributes
        get invoices_url
        expect(response).to be_successful
      end
    end

    describe "GET /show" do
      it "renders a successful response" do
        invoice = @user.invoices.create! valid_attributes
        get invoice_url(invoice)
        expect(response).to be_successful
      end
    end

    describe "GET /new" do
      it "renders a successful response" do
        get new_invoice_url
        expect(response).to be_successful
      end
    end

    describe "GET /edit" do
      it "renders a successful response" do
        invoice = @user.invoices.create! valid_attributes
        get edit_invoice_url(invoice)
        expect(response).to be_successful
      end
    end

    describe "POST /create" do
      context "with valid parameters" do
        it "creates a new Invoice" do
          expect {
            post invoices_url, params: { invoice: valid_attributes }
          }.to change(Invoice, :count).by(1)
        end

        it "redirects to the created invoice" do
          post invoices_url, params: { invoice: valid_attributes }
          expect(response).to redirect_to(invoice_url(Invoice.last))
        end
      end

      context "with invalid parameters" do
        it "does not create a new Invoice" do
          expect {
            post invoices_url, params: { invoice: invalid_attributes }
          }.to change(Invoice, :count).by(0)
        end

        it "renders a successful response (i.e. to display the 'new' template)" do
          post invoices_url, params: { invoice: invalid_attributes }
          expect(response).to be_successful
        end
      end
    end

    describe "PATCH /update" do
      context "with valid parameters" do
        let(:new_attributes) {
        { emails: "vini@husky.io" }
        }

        it "updates the requested invoice" do
          invoice = @user.invoices.create! valid_attributes
          patch invoice_url(invoice), params: { invoice: new_attributes }
          invoice.reload
          expect(invoice.emails).to eq(new_attributes[:emails])
        end

        it "redirects to the invoice" do
          invoice = @user.invoices.create! valid_attributes
          patch invoice_url(invoice), params: { invoice: new_attributes }
          invoice.reload
          expect(response).to redirect_to(invoice_url(invoice))
        end
      end

      context "with invalid parameters" do
        it "renders a successful response (i.e. to display the 'edit' template)" do
          invoice = @user.invoices.create! valid_attributes
          patch invoice_url(invoice), params: { invoice: invalid_attributes }
          expect(response).to have_http_status(:unprocessable_entity)
        end
      end
    end

    describe "DELETE /destroy" do
      it "destroys the requested invoice" do
        invoice = @user.invoices.create! valid_attributes
        expect {
          delete invoice_url(invoice)
        }.to change(Invoice, :count).by(-1)
      end

      it "redirects to the invoices list" do
        invoice = @user.invoices.create! valid_attributes
        delete invoice_url(invoice)
        expect(response).to redirect_to(invoices_url)
      end
    end
  end
end
